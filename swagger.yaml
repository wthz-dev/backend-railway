openapi: 3.0.0
info:
  title: My Blog API
  version: 1.0.0
  description: API for My Blog
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
        role:
          type: string
paths:
  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      security: []
      description: Login user and return access token and refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string

  /api/auth/register:
    post:
      summary: Register user
      tags: [Register]
      security: []
      description: Register user and return access token and refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string

  /api/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      security: []
      description: Use refresh token to get new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  newRefreshToken:
                    type: string

  /api/auth/me:
    get:
      summary: Get current logged-in user
      tags: [Auth]
      description: Return current user info using access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /api/users:
    get:
      summary: Get all users
      tags: [User Management]
      description: Get a paginated list of all users (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of users with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        email:
                          type: string
                        role:
                          type: string
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not an admin
    
    post:
      summary: Create new user
      tags: [User Management]
      description: Create a new user (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [USER, ADMIN]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
        '400':
          description: Bad request - Missing required fields
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not an admin
        '409':
          description: Conflict - Email already exists
  
  /api/users/{id}:
    get:
      summary: Get user by ID
      tags: [User Management]
      description: Get user details by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not an admin
        '404':
          description: User not found
    
    put:
      summary: Update user
      tags: [User Management]
      description: Update user details (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [USER, ADMIN]
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not an admin
        '404':
          description: User not found
        '409':
          description: Conflict - Email already exists
    
    delete:
      summary: Delete user
      tags: [User Management]
      description: Delete a user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not an admin
        '404':
          description: User not found

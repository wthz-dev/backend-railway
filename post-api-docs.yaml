  /api/posts:
    get:
      summary: Get all posts
      tags: [Posts]
      description: Get a paginated list of all posts
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: published
          schema:
            type: boolean
            default: true
          description: Filter by published status (admin only)
      responses:
        '200':
          description: List of posts with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create new post
      tags: [Posts]
      description: Create a new blog post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                excerpt:
                  type: string
                content:
                  type: string
                image:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                published:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request - Missing required fields
        '401':
          description: Unauthorized

  /api/posts/{slug}:
    get:
      summary: Get post by slug
      tags: [Posts]
      description: Get post details by slug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Post slug
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    
    put:
      summary: Update post
      tags: [Posts]
      description: Update post details (only author or admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Post slug
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                excerpt:
                  type: string
                content:
                  type: string
                image:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                published:
                  type: boolean
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not the author or admin
        '404':
          description: Post not found
    
    delete:
      summary: Delete post
      tags: [Posts]
      description: Delete a post (only author or admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Post slug
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not the author or admin
        '404':
          description: Post not found

  /api/posts/tag/{tag}:
    get:
      summary: Get posts by tag
      tags: [Posts]
      description: Get posts filtered by tag
      parameters:
        - in: path
          name: tag
          required: true
          schema:
            type: string
          description: Tag name
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of posts with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer

  /api/posts/tags:
    get:
      summary: Get all tags
      tags: [Posts]
      description: Get all available tags with post counts
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    postCount:
                      type: integer
